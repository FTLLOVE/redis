package redis

import (
	"context"
	"github.com/go-redis/redis/v8"
	"time"
)

type Commander interface {
	Ping(ctx context.Context) (string, error)
	Migrate(ctx context.Context, host, port, key string, db int, timeout time.Duration) (string, error)
	Move(ctx context.Context, key string, db int) (bool, error)
	Exists(ctx context.Context, keys ...string) (int64, error)
	Expire(ctx context.Context, key string, expiration time.Duration) (bool, error)
	Keys(ctx context.Context, pattern string) ([]string, error)
	Del(ctx context.Context, keys ...string) (int64, error)
	ObjectRefCount(ctx context.Context, key string) (int64, error)
	ObjectEncoding(ctx context.Context, key string) (string, error)
	ObjectIdleTime(ctx context.Context, key string) (time.Duration, error)
	Persist(ctx context.Context, key string) (bool, error)
	PExpire(ctx context.Context, key string, expiration time.Duration) (bool, error)
	PTTL(ctx context.Context, key string) (time.Duration, error)
	RandomKey(ctx context.Context) (string, error)
	Rename(ctx context.Context, key, newkey string) (string, error)
	Restore(ctx context.Context, key string, ttl time.Duration, value string) (string, error)
	RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) (string, error)
	Touch(ctx context.Context, keys ...string) (int64, error)
	TTL(ctx context.Context, key string) (time.Duration, error)
	Append(ctx context.Context, key, value string) (int64, error)
	Decr(ctx context.Context, key string) (int64, error)
	DecrBy(ctx context.Context, key string, decrement int64) (int64, error)
	Get(ctx context.Context, key string) (string, error)
	GetRange(ctx context.Context, key string, start, end int64) (string, error)
	GetSet(ctx context.Context, key string, value interface{}) (string, error)
	GetEx(ctx context.Context, key string, expiration time.Duration) (string, error)
	GetDel(ctx context.Context, key string) (string, error)
	Incr(ctx context.Context, key string) (int64, error)
	IncrBy(ctx context.Context, key string, value int64) (int64, error)
	IncrByFloat(ctx context.Context, key string, value float64) (float64, error)
	MGet(ctx context.Context, keys ...string) ([]interface{}, error)
	MSet(ctx context.Context, values ...interface{}) (string, error)
	MSetNX(ctx context.Context, values ...interface{}) (bool, error)
	Set(ctx context.Context, key string, value interface{}, expiration time.Duration) (string, error)
	SetEX(ctx context.Context, key string, value interface{}, expiration time.Duration) (string, error)
	SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) (bool, error)
	SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) (bool, error)
	SetRange(ctx context.Context, key string, offset int64, value string) (int64, error)
	StrLen(ctx context.Context, key string) (int64, error)
	Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) (int64, error)
	GetBit(ctx context.Context, key string, offset int64) (int64, error)
	SetBit(ctx context.Context, key string, offset int64, value int) (int64, error)
	BitOpAnd(ctx context.Context, destKey string, keys ...string) (int64, error)
	BitOpOr(ctx context.Context, destKey string, keys ...string) (int64, error)
	BitOpXor(ctx context.Context, destKey string, keys ...string) (int64, error)
	BitOpNot(ctx context.Context, destKey string, key string) (int64, error)
	BitPos(ctx context.Context, key string, bit int64, pos ...int64) (int64, error)
	BitField(ctx context.Context, key string, args ...interface{}) ([]int64, error)
	Scan(ctx context.Context, cursor uint64, match string, count int64) ([]string, uint64, error)
	ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) ([]string, uint64, error)
	SScan(ctx context.Context, key string, cursor uint64, match string, count int64) ([]string, uint64, error)
	HScan(ctx context.Context, key string, cursor uint64, match string, count int64) ([]string, uint64, error)
	ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) ([]string, uint64, error)
	HDel(ctx context.Context, key string, fields ...string) (int64, error)
	HExists(ctx context.Context, key, field string) (bool, error)
	HGet(ctx context.Context, key, field string) (string, error)
	HGetAll(ctx context.Context, key string) (map[string]string, error)
	HIncrBy(ctx context.Context, key, field string, incr int64) (int64, error)
	HIncrByFloat(ctx context.Context, key, field string, incr float64) (float64, error)
	HKeys(ctx context.Context, key string) ([]string, error)
	HLen(ctx context.Context, key string) (int64, error)
	HMGet(ctx context.Context, key string, fields ...string) ([]interface{}, error)
	HSet(ctx context.Context, key string, values ...interface{}) (int64, error)
	HMSet(ctx context.Context, key string, values ...interface{}) (bool, error)
	HSetNX(ctx context.Context, key, field string, value interface{}) (bool, error)
	HVals(ctx context.Context, key string) ([]string, error)
	HRandField(ctx context.Context, key string, count int, withValues bool) ([]string, error)
	BLPop(ctx context.Context, timeout time.Duration, keys ...string) ([]string, error)
	BRPop(ctx context.Context, timeout time.Duration, keys ...string) ([]string, error)
	BRPopLPush(ctx context.Context, source, destination string, timeout time.Duration) (string, error)
	LIndex(ctx context.Context, key string, index int64) (string, error)
	LInsert(ctx context.Context, key, op string, pivot, value interface{}) (int64, error)
	LInsertBefore(ctx context.Context, key string, pivot, value interface{}) (int64, error)
	LInsertAfter(ctx context.Context, key string, pivot, value interface{}) (int64, error)
	LLen(ctx context.Context, key string) (int64, error)
	LPop(ctx context.Context, key string) (string, error)
	LPopCount(ctx context.Context, key string, count int) ([]string, error)
	LPush(ctx context.Context, key string, values ...interface{}) (int64, error)
	LPushX(ctx context.Context, key string, values ...interface{}) (int64, error)
	LRange(ctx context.Context, key string, start, stop int64) ([]string, error)
	LRem(ctx context.Context, key string, count int64, value interface{}) (int64, error)
	LSet(ctx context.Context, key string, index int64, value interface{}) (string, error)
	LTrim(ctx context.Context, key string, start, stop int64) (string, error)
	RPop(ctx context.Context, key string) (string, error)
	RPopCount(ctx context.Context, key string, count int) ([]string, error)
	RPopLPush(ctx context.Context, source, destination string) (string, error)
	RPush(ctx context.Context, key string, values ...interface{}) (int64, error)
	RPushX(ctx context.Context, key string, values ...interface{}) (int64, error)
	LMove(ctx context.Context, source, destination, srcpos, destpos string) (string, error)
	BLMove(ctx context.Context, source, destination, srcpos, destpos string, timeout time.Duration) (string, error)
	SAdd(ctx context.Context, key string, members ...interface{}) (int64, error)
	SCard(ctx context.Context, key string) (int64, error)
	SDiff(ctx context.Context, keys ...string) ([]string, error)
	SDiffStore(ctx context.Context, destination string, keys ...string) (int64, error)
	SInter(ctx context.Context, keys ...string) ([]string, error)
	SInterStore(ctx context.Context, destination string, keys ...string) (int64, error)
	SIsMember(ctx context.Context, key string, member interface{}) (bool, error)
	SMIsMember(ctx context.Context, key string, members ...interface{}) ([]bool, error)
	SMembers(ctx context.Context, key string) ([]string, error)
	SMembersMap(ctx context.Context, key string) (map[string]struct{}, error)
	SMove(ctx context.Context, source, destination string, member interface{}) (bool, error)
	SPop(ctx context.Context, key string) (string, error)
	SPopN(ctx context.Context, key string, count int64) ([]string, error)
	SRandMember(ctx context.Context, key string) (string, error)
	SRandMemberN(ctx context.Context, key string, count int64) ([]string, error)
	SRem(ctx context.Context, key string, members ...interface{}) (int64, error)
	SUnion(ctx context.Context, keys ...string) ([]string, error)
	SUnionStore(ctx context.Context, destination string, keys ...string) (int64, error)
	XDel(ctx context.Context, stream string, ids ...string) (int64, error)
	XLen(ctx context.Context, stream string) (int64, error)
	XRange(ctx context.Context, stream, start, stop string) ([]redis.XMessage, error)
	XRangeN(ctx context.Context, stream, start, stop string, count int64) ([]redis.XMessage, error)
	XRevRange(ctx context.Context, stream, start, stop string) ([]redis.XMessage, error)
	XRevRangeN(ctx context.Context, stream, start, stop string, count int64) ([]redis.XMessage, error)
	XReadStreams(ctx context.Context, streams ...string) ([]redis.XStream, error)
	XGroupCreate(ctx context.Context, stream, group, start string) (string, error)
	XGroupCreateMkStream(ctx context.Context, stream, group, start string) (string, error)
	XGroupSetID(ctx context.Context, stream, group, start string) (string, error)
	XGroupDestroy(ctx context.Context, stream, group string) (int64, error)
	XGroupCreateConsumer(ctx context.Context, stream, group, consumer string) (int64, error)
	XGroupDelConsumer(ctx context.Context, stream, group, consumer string) (int64, error)
	XAck(ctx context.Context, stream, group string, ids ...string) (int64, error)
	XPending(ctx context.Context, stream, group string) (*redis.XPending, error)
	XTrim(ctx context.Context, key string, maxLen int64) (int64, error)
	XTrimApprox(ctx context.Context, key string, maxLen int64) (int64, error)
	XTrimMaxLen(ctx context.Context, key string, maxLen int64) (int64, error)
	XTrimMaxLenApprox(ctx context.Context, key string, maxLen, limit int64) (int64, error)
	XTrimMinID(ctx context.Context, key string, minID string) (int64, error)
	XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) (int64, error)
	ZAdd(ctx context.Context, key string, members ...*Z) (int64, error)
	ZAddNX(ctx context.Context, key string, members ...*Z) (int64, error)
	ZAddXX(ctx context.Context, key string, members ...*Z) (int64, error)
	ZIncr(ctx context.Context, key string, member *Z) (float64, error)
	ZIncrNX(ctx context.Context, key string, member *Z) (float64, error)
	ZIncrXX(ctx context.Context, key string, member *Z) (float64, error)
	ZCard(ctx context.Context, key string) (int64, error)
	ZCount(ctx context.Context, key, min, max string) (int64, error)
	ZLexCount(ctx context.Context, key, min, max string) (int64, error)
	ZIncrBy(ctx context.Context, key string, increment float64, member string) (float64, error)
	ZInter(ctx context.Context, store *ZStore) ([]string, error)
	ZInterWithScores(ctx context.Context, store *ZStore) ([]Z, error)
	ZInterStore(ctx context.Context, destination string, store *ZStore) (int64, error)
	ZMScore(ctx context.Context, key string, members ...string) ([]float64, error)
	ZPopMax(ctx context.Context, key string, count ...int64) ([]Z, error)
	ZPopMin(ctx context.Context, key string, count ...int64) ([]Z, error)
	ZRange(ctx context.Context, key string, start, stop int64) ([]string, error)
	ZRangeWithScores(ctx context.Context, key string, start, stop int64) ([]Z, error)
	ZRangeByScore(ctx context.Context, key string, opt *ZRangeBy) ([]string, error)
	ZRangeByLex(ctx context.Context, key string, opt *ZRangeBy) ([]string, error)
	ZRangeByScoreWithScores(ctx context.Context, key string, opt *ZRangeBy) ([]Z, error)
	ZRank(ctx context.Context, key, member string) (int64, error)
	ZRem(ctx context.Context, key string, members ...interface{}) (int64, error)
	ZRemRangeByRank(ctx context.Context, key string, start, stop int64) (int64, error)
	ZRemRangeByScore(ctx context.Context, key, min, max string) (int64, error)
	ZRemRangeByLex(ctx context.Context, key, min, max string) (int64, error)
	ZRevRange(ctx context.Context, key string, start, stop int64) ([]string, error)
	ZRevRangeWithScores(ctx context.Context, key string, start, stop int64) ([]Z, error)
	ZRevRank(ctx context.Context, key, member string) (int64, error)
	ZScore(ctx context.Context, key, member string) (float64, error)
	ZUnionStore(ctx context.Context, dest string, store *ZStore) (int64, error)
	ZUnion(ctx context.Context, store ZStore) ([]string, error)
	ZUnionWithScores(ctx context.Context, store ZStore) ([]Z, error)
	ZRandMember(ctx context.Context, key string, count int, withScores bool) ([]string, error)
	ZDiff(ctx context.Context, keys ...string) ([]string, error)
	ZDiffWithScores(ctx context.Context, keys ...string) ([]Z, error)
	ZDiffStore(ctx context.Context, destination string, keys ...string) (int64, error)
	PFAdd(ctx context.Context, key string, els ...interface{}) (int64, error)
	PFCount(ctx context.Context, keys ...string) (int64, error)
	PFMerge(ctx context.Context, dest string, keys ...string) (string, error)
	BgRewriteAOF(ctx context.Context) (string, error)
	BgSave(ctx context.Context) (string, error)
	ClientKill(ctx context.Context, ipPort string) (string, error)
	ClientKillByFilter(ctx context.Context, keys ...string) (int64, error)
	ClientList(ctx context.Context) (string, error)
	ClientPause(ctx context.Context, dur time.Duration) (bool, error)
	ClientID(ctx context.Context) (int64, error)
	ConfigGet(ctx context.Context, parameter string) ([]interface{}, error)
	ConfigResetStat(ctx context.Context) (string, error)
	ConfigSet(ctx context.Context, parameter, value string) (string, error)
	ConfigRewrite(ctx context.Context) (string, error)
	DBSize(ctx context.Context) (int64, error)
	FlushAll(ctx context.Context) (string, error)
	FlushAllAsync(ctx context.Context) (string, error)
	FlushDB(ctx context.Context) (string, error)
	FlushDBAsync(ctx context.Context) (string, error)
	Info(ctx context.Context, section ...string) (string, error)
	LastSave(ctx context.Context) (int64, error)
	Save(ctx context.Context) (string, error)
	Shutdown(ctx context.Context) (string, error)
	ShutdownSave(ctx context.Context) (string, error)
	ShutdownNoSave(ctx context.Context) (string, error)
	SlaveOf(ctx context.Context, host, port string) (string, error)
	Time(ctx context.Context) (time.Time, error)
	DebugObject(ctx context.Context, key string) (string, error)
	ReadOnly(ctx context.Context) (string, error)
	ReadWrite(ctx context.Context) (string, error)
	MemoryUsage(ctx context.Context, key string, samples ...int) (int64, error)
	Eval(ctx context.Context, script string, keys []string, args ...interface{}) (interface{}, error)
	EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) (interface{}, error)
	ScriptExists(ctx context.Context, hashes ...string) ([]bool, error)
	ScriptFlush(ctx context.Context) (string, error)
	ScriptKill(ctx context.Context) (string, error)
	ScriptLoad(ctx context.Context, script string) (string, error)
	Publish(ctx context.Context, channel string, message interface{}) (int64, error)
	PubSubChannels(ctx context.Context, pattern string) ([]string, error)
	PubSubNumSub(ctx context.Context, channels ...string) (map[string]int64, error)
	PubSubNumPat(ctx context.Context) (int64, error)
}
